Hooks : React v16.8에서 새롭게 등장한 개념, React로 개발할 때 대부분 hook을 사용한다.

	  Function Component에서 state와 Lifecycle에 따른 기능 구현이 불가능하기때문에 기능을 지원하기 위해 나온 기능이다.

	   hook의 함수들은 모두 use로 시작한다.

	  개발자가 직접 hook을 커스텀하여 사용 가능하고 명명할때 hook이란걸 나타내주기 위해 use를 붙여서 명명한다.


useState() : state를 사용하기 위한 Hook

		function 내에 count라는 값을 선언하고 클릭하면 count의 값이 실행되는 함수가 있다고 가정한다.

		click을 해도 function Component에서 rendering이 되지 않는다면 화면에 표시되는 count의 값은 처음 렌더링된 값 그대로이다.

		하지만 function Component에는 state를 따로 사용할 수 없기 때문에 useState를 사용하여 값이 재렌더링되도록 해야한다.


		사용법
		const [변수명, set함수명] = useState(초기값);

		ex)
			import React, { useState } from "react";

			function Counter(props) {
				const [count, setCount] = useState(0);

				return (
					<div>
						<p>총 {count}번 클릭했습니다.</p>
						<button onClick={() => setCount(count + 1)}>클릭</button>
					</div>
				);
			}

		
		class Component에서는 setState 함수 하나를 사용해서 모든 변수를 정의할 수 있었지만
		function Component에서는 변수 각각에 대해 set함수가 따로 존재한다.


useEffect() : Side Effect를 수행하기 위한 Hook

		   React에서의 Side Effect는 부정적인 의미가 아닌 효과, 영향이다.
		  ex) 서버에서 데이터를 받아오거나 수동으로 DOM을 변경하는 작업

		  * 다른 컴포넌트에 영향을 미칠 수 있으며, 렌더링 중에는 작업이 완료될 수 없기 때문이다.

		  리액트의 함수 컴포넌트에서 Side Effect를 실행할 수 있게 해주는 Hook

		   Class Component의 componentDidMount, componentDidUpdate, componentWillUnmount 함수와 동일한 기능을

		  하나의 useEffect 함수에서 제공해준다.


		  사용법
		  useEffect(Effect Function, 의존성 배열);

		  * 의존성 배열 : Effect가 의존하고 있는 배열

		   의존성 배열안의 값이 하나라도 수정됐을 경우에 Effect 함수가 실행된다.

		  기본적으로 처음 컴포넌트가 렌더링되는 경우와 Update로 재렌더링되는 경우에 실행된다.


		  ! 만약 Effect Function이 mount, unmount시에 한 번씩만 실행되게 하고싶은 경우 의존성 배열에 빈 배열을 넣어준다.
		   useEffect(Effect function, []);
		  해당 Effect가 props나 state에 있는 어떤 값에도 의존하지 않는 것이므로 한 번만 실행되는 것이다.

		  의존성 배열을 생략하면 Component가 업데이트될 때마다 호출된다.


useMemo() : Memoized value를 리턴하는 Hook

		* Memoization : 최적화를 위해 사용하는 개념, 비용이 높은(연산량이 많은) 함수를 미리 저장해놨다가 나중에 바로 호출하는 개념

		사용법
		momoized value를 생성하는 creative function과 의존성 변수를 파라미터로 갖는다.

		const memoizedValue = useMemo(() => {return computeExpensiveValue(의존성 변수1, 의존성 변수2)}, [의존성 변수1, 의존성 변수2]);

		의존성 변수의 값이 변했을 경우에만 새로 creative function을 호출하고 아닐 경우 기존의 값을 그대로 가지고 있다.

		장점
		component가 반복해서 실행될 때마다 연산량이 높은 함수를 재실행하지 않아도 되기 때문에 비용절감효과를 볼 수 있다.(빠른 렌더링)

 		! useMemo는 렌더링이 실행될 때 실행되는 함수이므로 렌더링이 실행될 때 실행하면 안되는 함수를 넣어서는 안된다.
		ex) useEffect에서 실행되어야 하는 SideEffect 함수, 서버에서 데이터를 받아오거나 수동으로 DOM을 변경하는 작업

		! 의존성 배열을 넣지 않을 경우, 매 렌더링마다 함수가 실행된다.

		의존성 배열이 빈 배열인 경우, 컴포넌트가 마운트 될때만 함수가 실행된다.


useCallback() : useMemo() Hook과 유사하지만 값이 아닌 함수를 반환하는 Hook

		   의존성 배열의 값이 바뀌는 경우에만 함수를 반환해준다.

		   사용법
		     const memoizedCallback = useCallback(() => { doSomething(의존성 변수1, 의존성 변수2); }, [의존성 변수1, 의존성 변수2]);

		     파라미터로 받는 함수를 Callback이라고 부른다.

		   변수 중 하나라도 변경되면 저장된 함수를 반환한다.

		   useMemo와 역할이 같기 때문에 아래의 코드처럼 바꿔서 사용할 수 있다.
		     ex) useCallback(함수, 의존성 배열);  ===  useMemo(() => 함수, 의존성 배열);


useRef() : Reference를 사용하기 위한 Hook

		* Reference : 특정 Component에 접근할 수 있는 객체

		사용법
		const refContainer = useRef(초기값);

		!useRef() Hook은 내부의 데이터가 변경되어도 별도로 알리지 않는다. 
		=> ref에 DOM Node가 연결되거나 분리되었을 때 어떤 코드를 실행하고 싶다면 Callback ref를 사용해야만 한다.


Callback ref : useCallback 함수를 사용하고 ref로 호출한다.


Hook의 규칙

1. Hook은 무조건 최상위 레벨에서만 호출해야 한다.

	* 최상위 레벨 : React Function Component의 최상위 레벨

1-1. Hook은 컴포넌트가 렌더링될 때마다 매번 같은 순서로 호출되어야 한다.
	ex) 잘못된 코드
		function MyComponent(props) {
			const [name, setName] = useState('Inje');

			if(name !== '') {
				useEffect(() => { ... });
			}
		}

		why? name이 null값을 가질 경우 if문에 의해 useEffect가 실행되지않는다.


2. React Function Component에서만 Hook을 호출해야 한다.



Custom Hook 만들기

만들어야 하는 상황 : 2개의 JS에서 중복되는 함수가 있어 공유하려고 할때 새로운 함수를 만들어서 사용한다.

Custom Hook은 규칙이 없지만 Hook의 2가지 규칙을 따라야하고 단순한 함수이지만 함수명에 use를 붙여줘서 Hook이란걸 표시해야한다.

! 여러 개의 Component에서 하나의 Custom Hook을 사용할 때 Component 내부에 있는 모든 state와 effects는 전부 분리되어 있다.

각 Custom Hook 호출에 대해서 분리된 state를 갖게 된다. (각 Custom Hook의 호출 또한 완전히 독립적이다.)


Hook들 사이에서 데이터 공유하는 방법
function ChatUserSelector(props) {
	const [userId, setUserId] = useState(1);		// useState로 생성한 userId를
	const isUserOnline = useUserStatus(userId);	// 함수에서 바로 사용할 수 있고 userId가 변경될 때 마다 바뀐다.
}



	