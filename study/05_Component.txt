Component : React에서는 모든 페이지가 컴포넌트로 구성돼있다.

레고 블록 조립하듯 컴포넌트를 조합하여 화면을 구성한다.


Props: React Component 입력

React Element : React Component 출력


Props : properties (속성)

 - Component의 속성을 의미한다.


 특징
  - 모든 리액트 컴포넡트는 Props를 직접 바꿀 수 없고, 같은 Props에 대해서는 항상 같은 결과를 보여줘야한다.(Pure하다)

  'Pure' : 입력값(input)을 변경하지 않으며, 같은 입력값에 대해서는 항상 같은 출력값(output)을 리턴해준다.

   ex) function sum(a+b) { return a+b; }


  'Impure'(반대) : function withdraw(account, amount) { account.total -= amount; }


 사용법
  - 문자열 이외의 정수, 변수, 다른 컴포넌트들이 들어갈 때에는 {}로 감싸주어야한다. (문자열도 {}로 감싸줘도 상관없다.)

 종류
  - Funtion Component
	코드가 간단하다.
	ex) function Welcome(props) { return <h1>Hello, {props.name}</h1>; }

  - Class Component
	JS ES6의 Class를 이용해 만들어진 컴포넌트이다.
	ex) class Welcome extends React.Component {
		render() { return <h1>Hello, {props.name}</h1>; }
	}



Component 명명 규칙

 - Component의 이름은 항상 대문자로 시작해야한다. ( bcs, React는 소문자로 시작하는 Component를 DOM Component로 인식한다.)

   ex) const element = <div />; => HTML태그인 div로 인식한다.

       const element = <Welcome name="인제" /> => Welcome이라는 React Component로 인식한다.



Component Rendering

 - 실제로 컴포넌트가 화면에 렌더링 되는 것은 아니다. (컴포넌트로 생성한 Element가 화면에 렌더링 되는 것이다.)

 - ReactDOM.render() 함수로 렌더링 한다.



Component 합성

 여러개의 Component를 합쳐서 하나의 Component를 만드는 것.

 Component 안에 또다른 COmponent를 사용할 수 있다.


Component 추출

 코드의 재사용성이 높아지고 개발 속도도 향상된다.


생명주기의 경우 지금은 거의 사용하지 않는 Class Component에서 사용하는 함수이기때문에 알고만 있으면 된다.

