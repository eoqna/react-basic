Composition : 합성, 여러 개의 컴포넌트를 합쳐서 새로운 컴포넌트를 만드는 것

여러개의 컴포넌들을 어떻게 조합할 것인가?

대표적인 컴포지션 방법

1. Containment : 하위 컴포넌트를 포함하는 형태의 합성 방법

Sidebar, Dialog같은 Box 형태의 컴포넌트는 자신의 하위 컴포넌트를 미리 알 수 없다.

children이라는 prop를 사용해서 조합한다.

ex)
function FancyBorder(props) {
	return (
		<div> {props.children} </div>
	)
}

결과 : 해당 컴포넌트의 하위 컴포넌트가 children으로 들어오게 된다.


2. Specialization : 범용적인 개념을 구별이 되게 구체화하는 것
			  기존의 객체지향언어에서는 상속을 사용하여 Specialization을 구현했다.
			   React에서는 Composition을 사용하여 Specialization을 구현한다.


Containment와 Specialization를 같이 사용하는 방법

ex)
부모 컴포넌트
	<Children>
		// Specialization
		<h1>{props.title}</h1>
		<p>{props.message}</p>

		// Containment
		{props.children}
	</Children>

하위 컴포넌트
<Dialog
	title="화성 탐사 프로그램"
	message="닉네임을 입력해 주세요.">
	
	<input
		value={nickname}
		onChange={handleChange} />
	<button onClick={handleSignUp}>가입하기</button>
</Dialog>



2. Inheritance : Composition과 대비되는 방법, 부모클래스를 상속받아서 새로운 자식클래스를 만든다.	
			다른 컴포넌트로부터 상속을 받아서 새로운 컴포넌트를 만드는 것

			! 상속을 이용하여 컴포넌트를 만드는 것을 추천할 만한 사례를 발견하지 못했다고 한다.(사용X)
		

결론 : 복잡한 컴포넌트를 쪼개서 여러 개의 컴포넌트로 만들고, 만든 컴포넌트들을 조합해서 새로운 컴포넌트를 만드는 것이 좋다.


