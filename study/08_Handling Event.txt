Event : 특정 사건을 의미 (ex) 버튼을 클릭한 사건(버튼 클릭 이벤트)

	* Event Handling : 이벤트를 처리하는 것 (=Event Listener)


DOM의 Event : onclick을 통해서 문자열로 전달한다.
	ex) <button onclick="activate()">clicked</button>

React의 Event : onClick을 통해서 전달하고 함수 자체로 전달한다.
	ex) <button onClick={activate}>clicked</button>



Event Handler 추가 방법

1) Class Component

1-1) binding 해준다.
bind를 해줘야 하는 이유 : 자동으로 bind해주는 기능이 없기 때문에 bind를 안하면 global function에서 함수를 찾게 되고 undefined가 나오게 된다.

ex)

class Toggle extends React.Component {
	constructor(props) {
		super(props);
		this.state = { isToggleOn: true };

		this.handleClick = this.handleClick.bind(this);
	}

	handleClick() {
		this.setState(prevState => ({
			isToggleOn: !prevState.isToggleOn
		}));
	}

	render() {
		return (
			<button onClick={this.handleClick}> { this.state.isToggleOn ? '켜짐' : '꺼짐' } </button>
		)
	}
}


1-2) Class fields syntax를 사용한다.

ex)

class MyButton extends React.Component {
	handleClick() {
		console.log('this is:', this);
	}

	render() {
		return (
			<button onClick={this.handleClick}>클릭</button>
		)
	}
}


1-3) onClick에 Arrow function을 사용하면 된다.

ex)

class MyButton extends React.Component {
	handleClick() {
		console.log('this is:', this);
	}

	render() {
		return (
			<button onClick={() => this.handleClick()}>클릭</button>
		)
	}
}

!하지만, 이 방식의 경우 렌더링될 때 마다 새로운 콜백 함수가 생성된다.
 해당 함수가 하위 컴포넌트에 props로 넘겨지게 된다면 하위 컴포넌트의 함수도 재렌더링되는 문제가 발생할 수 있다.(성능이슈)
 따라서, 성능 문제를 피하기 위해서 1번이나 2번의 방법으로 사용하는 것을 권장한다.



2. Function Component
* 함수 컴포넌트에서 이벤트 핸들러에 함수를 넣어줄 때 this를 사용하지않고 곧바로 함수명을 넣어주면 된다.


2-1) 함수 안에 또다른 함수로 정의한다.

ex)
function Toggle(props) {
	const [isToggleOn, setIsToggleOn ] = useState(true);

	function handleClick() {
		setToggleOn((isToggleOn) => !isToggleOn);
	}

	return (
		<button onClick={handleClick}>{isToggleOn ? '켜짐' : '꺼짐' }</button>
	)
}


2-2) arrow function을 사용하여 정의한다.

ex)
function Toggle(props) {
	const [isToggleOn, setIsToggleOn ] = useState(true);

	const handleClick = () => {
		setToggleOn((isToggleOn) => !isToggleOn);
	}

	return (
		<button onClick={handleClick}>{isToggleOn ? '켜짐' : '꺼짐' }</button>
	)
}


Arguments 전달 방법

* Arguments : Event Handler에 전달할 데이터, 매개변수 (=Parameter)

1. Class Component

1-1) Arrow Function 사용

ex)
<button onClick={(event) => this.deleteItem(id, event)}>삭제하기</button>


1-2) bind 사용

ex)
<button onClick={this.deleteItem.bind(this, id)}>삭제하기</button>


2. Function Component

ex)
function MyButton(props) {
	const handleDelete = (id, event) => {
		console.log(id, event.target);
	};

	return (
		<button onClick={(event) => handleDelete(1, event)}>삭제하기</button>
	);
}

* 매개변수의 순서는 원하는대로 변경해도 상관 없다.
